# help.vim can be used to make it easier to populate this list (for vim)
# vsplit this file and errors.txt
# (load help.json into Plover)

plover_misstrokes={
"PRAOU/-D",               # produced
"KHRUD/-G",               # including
"K-B/-S",                 # conditions
"TKWRA*ER", # !! (DWRAE*R,): area -- ['ɛɹiə']
"PHRAEUB", # !! (PLAIB,): maybe -- ['meɪbi']
"TPRAEUPBD", # (FRAIND,): trained -- ['tɹeɪnd']
"TPHRET", # (NRET,): net -- ['nɛt']
"PWRAP/-D", # (BRAP, -D): wrapped -- ['ɹæpt']
"KORPL/TEU", # (KORM, TI): conformity -- ['kənfɔɹməti']
"SKROFP", # (SKROCh,): scratch -- ['skɹætʃ']
"SKRAFRPB", # (SKRARch,): scratch -- ['skɹætʃ']
"ROUPBLDZ", # (ROUNLDZ,): rounds -- ['ɹaʊndz', 'ɹaʊnz']
"PR-FPLD", # !! (PR-ChLD,): purchased -- ['pəɹtʃəst']
"PR-FPDZ", # !! (PR-ChDZ,): purchased -- ['pəɹtʃəst']
"OE/-D/-D", # !! (OE, -D, -D): owed -- ['oʊd']
"TPHOFR", # !! (NOFR,): forever -- ['fəɹɛvəɹ']
"RA*EUFPBG", # !! (RAI*FNG,): reign -- ['ɹeɪn']
"EUPB/SREUFD", # !! (IN, VIFD): involved -- ['ɪnvɑɫvd']
"TWOEFL", # !! (TWOEFL,): twelve -- ['twɛɫv']
"EUPB/RAEUR/PWHREU", # !! (IN, RAIR, BLI): invariably -- ['ˌɪnˈvɛɹiəbɫi']
"SPEURBL/HREU", # !! (SPIʃL, LI): specially -- ['ˈspɛʃəɫi', 'ˈspɛʃɫi']
"R-PBGS", # !! (R-Nʃn,): reasoning -- ['ˈɹizənɪŋ']
"AEUR/TKWRA", # !! (AIR, DWRA): area -- ['ˈɛɹiə']
"PWAOEUB/REU", # !! (BIIB, RI): library -- ['ˈɫaɪbɹɛˌɹi']
"SPAEURT/WAL", # !! (SPAIRT, WAL): spiritual -- ['ˈspɪɹɪˌtʃuəɫ']
"ORG/*PLT", # !! (ORG, *MT): argument -- ['ˈɑɹɡjəmənt']
"KOBG/PAOEU/-D", # !! (KOK, PII, -D): occupied -- ['ˈɑkjəˌpaɪd']
"HAPBD/SHAEUBGS", # (HAND, SHAIKS): hand -- ['ˈhænd']
"KAUPB/STAPT", # (KAUN, STAPT): constant -- ['ˈkɑnstənt']
"KAUPB/STRAPBT", # (KAUN, STRANT): constant -- ['ˈkɑnstənt']
"POL/SEU/SEU", # (POL, SI, SI): policy -- ['ˈpɑɫəsi']
"TKUPBL", # (DUNL,): double -- ['ˈdəbəɫ']
"HAOE/TEL", # (HEE, TEL): hotel -- ['hoʊˈtɛɫ']
"STEUPL/PHREU", # (STIM, PLI): simply -- ['ˈsɪmpɫi']
"SKETS", # (SKETS,): success -- ['səkˈsɛs']
"TPWAOEPB", # (FWEEN,): between -- ['bitˈwin', 'bɪtˈwin']
"HARLT", # (HARLT,): heart -- ['ˈhɑɹt']
"RULTSZ", # (RULTSZ,): results -- ['ɹiˈzəɫts', 'ɹɪˈzəɫts']
"PRAOEUP", # (PRIIP,): prepare -- ['pɹiˈpɛɹ']
"TPR-D", # (FR-D,): interested -- ['ˈɪntɝəstəd', 'ˈɪntɝɪstɪd', 'ˈɪntɹəstɪd', 'ˈɪntɹɪstɪd']
"A/TOEPLT", # (A, TOEMT): attempt -- ['əˈtɛmpt']
"PWRAOEPD", # (BREEPD,): prepared -- ['pɹiˈpɛɹd']
"A/STKPWRAOEPLT", # (A, SGREEMT): agreement -- ['əˈɡɹimənt']
"A/A/TKPWRAOEPLT", # (A, A, GREEMT): agreement -- ['əˈɡɹimənt']
"REFD/-D", # (REFD, -D): recognized -- ['ˈɹɛkəɡˌnaɪzd']
"SAULTD", # (SAULTD,): salt -- ['ˈsɔɫt']
"STAULT", # (STAULT,): salt -- ['ˈsɔɫt']
"STOBLG", # (STOBLG,): stock -- ['ˈstɑk']
"KAOPL/KAOL", # (KAOM, KAOL): cool -- ['ˈkuɫ']
"HREULT/RAER", # (LILT, RAER): literary -- ['ˈɫɪtɝˌɛɹi']
"A/TPART", # (A, FART): apart -- ['əˈpɑɹt']
"SRUFT/OPL", # (VUFT, OM): custom -- ['ˈkəstəm']
"SRA/SRAOEUT", # (VA, VIIT): variety -- ['vɝˈaɪəti']
"TPHOETSZ", # (NOETSZ,): notes -- ['ˈnoʊts']
"A/A/PHRAOEU", # (A, A, PLII): apply -- ['əˈpɫaɪ']
"STKOBG", # (SDOK,): stock -- ['ˈstɑk']
"SKWREPBLT/HREU", # (JENLT, LI): gently -- ['ˈdʒɛntɫi']
"HRAEURB", # (LAIʃ,): labor -- ['ˈɫeɪbɝ']
"TEURPL", # (TIRM,): term -- ['ˈtɝm']
"PWREUFPB", # (BRIFN,): prison -- ['ˈpɹɪzən']
"TKWUFT", # (DWUFT,): dust -- ['ˈdəst']
"TKPHRAOELT", # (DPLEELT,): completely -- ['kəmˈpɫitɫi']
"TKPREUFPB", # (DPRIFN,): driven -- ['ˈdɹɪvən']
"RA*PBLG", # (RA*J,): rank -- ['ˈɹæŋk']
"EUPB/KRAOES/-D/-D", # (IN, KREES, -D, -D): increased -- ['ˈɪnˌkɹist', 'ˌɪnˈkɹist']
"A/WROEFP", # (A, WROECh): approach -- ['əˈpɹoʊtʃ']
"A/TPROEFP", # (A, FROECh): approach -- ['əˈpɹoʊtʃ']
"A/PROFRP", # (A, PROMp): approach -- ['əˈpɹoʊtʃ']
"A/PROEF", # (A, PROEF): approach -- ['əˈpɹoʊtʃ']
"A/PHROEFP", # (A, PLOECh): approach -- ['əˈpɹoʊtʃ']
"EPB/S/TAOEUR", # (EN, S, TIIR): entire -- ['ɪnˈtaɪɝ']
"EPB/STAOEUR", # (EN, STIIR): entire -- ['ɪnˈtaɪɝ']
"EPB/TAOEURB", # (EN, TIIʃ): entire -- ['ɪnˈtaɪɝ']
"SUGS/-D", # (SUʃn, -D): suggested -- ['səˈdʒɛstɪd']
"SAEFD/-D", # (SAEFD, -D): satisfied -- ['ˈsætəsˌfaɪd', 'ˈsætɪsˌfaɪd']
"A/A*/A*PLT", # (A, A*, A*MT): amount -- ['əˈmaʊnt']
"PWA*FPBG", # (BA*FNG,): bank -- ['ˈbæŋk']
"STEUPL/HRAR", # (STIM, LAR): similar -- ['ˈsɪməɫɝ']
"A/TARBG", # (A, TAʃG): attack -- ['əˈtæk']
"HR*ELT", # (LE*LT,): health -- ['ˈhɛɫθ']
"EUPB/TAPBT", # (IN, TANT): instant -- ['ˈɪnstənt']
"EUPB/STAPT", # (IN, STAPT): instant -- ['ˈɪnstənt']
"PEUBG/AOUR", # (PIK, UUR): picture -- ['ˈpɪktʃɝ']
"STKWEUPB", # (SDWIN,): begin -- ['bɪˈɡɪn']
"REULT", # (RILT,): result -- ['ɹiˈzəɫt', 'ɹɪˈzəɫt']
"HRERPBD/-D", # (LERND, -D): learned -- ['ˈɫɝnd', 'ˈɫɝnɪd']
"HREUFPG", # (LIChG,): living -- ['ˈɫɪvɪŋ']
"POERPB", # (POERN,): person -- ['ˈpɝsən']
"SREPT/-D", # (VEPT, -D): represented -- ['ˌɹɛpɹɪˈzɛntɪd']
"RUR/KWREU/-D", # (RUR, YI, -D): hurried -- ['ˈhɝid']
"KAUPB/TAEUP/-D", # (KAUN, TAIP, -D): contained -- ['kənˈteɪnd']
"SWR-PBT", # (SWR-NT,): haven't -- ['ˈhævən', 'ˈhævənt']
"SR-PBTD", # (V-NTD,): haven't -- ['ˈhævən', 'ˈhævənt']
"SR-PBLT", # (V-NLT,): haven't -- ['ˈhævən', 'ˈhævənt']
"STOEP/-S", # (STOEP, -S): stones -- ['ˈstoʊnz']
"WASZ/-PBTD", # (WASZ, -NTD): wasn't -- ['ˈwɑzənt', 'ˈwəzənt']
"TRAOET/-D/-D", # (TREET, -D, -D): treated -- ['ˈtɹitɪd']
"TRAOET/#-D", # (TREET, #-D): treated -- ['ˈtɹitɪd']
"WAPBTS/-S", # (WANTS, -S): wants -- ['ˈwɑnts', 'ˈwɔnts']
"WAPBT/-S/-S", # (WANT, -S, -S): wants -- ['ˈwɑnts', 'ˈwɔnts']
"PWREULD/-G", # (BRILD, -G): building -- ['ˈbɪɫdɪŋ']
"PWEULTD/-G", # (BILTD, -G): building -- ['ˈbɪɫdɪŋ']
"PW-DZ/-Z", # (B-DZ, -Z): besides -- ['ˌbiˈsaɪdz', 'bɪˈsaɪdz']
"KWR-TDZ", # (Y-TDZ,): ideas -- ['aɪˈdiəz']
"KWR-PDZ", # (Y-PDZ,): ideas -- ['aɪˈdiəz']
"TKARBG/-PBLS", # (DAʃG, -NLS): darkness -- ['ˈdɑɹknəs']
"SEUTD/-G", # (SITD, -G): sitting -- ['ˈsɪtɪŋ']
"PARTS/-S", # (PARTS, -S): parts -- ['ˈpɑɹts']
"S-FRS", # (S-FRS,): service -- ['ˈsɝvəs', 'ˈsɝvɪs']
"KOFRT", # (KOFRT,): cost -- ['ˈkɑst', 'ˈkɔst']
"PAOERBD", # (PEEʃD,): period -- ['ˈpɪɹiəd']
"PWEULTD", # (BILTD,): built -- ['ˈbɪɫt']
"A/S-P", # (A, S-P): a -- ['ˈeɪ', 'ə']
"SHOUD", # (SHOUD,): should -- ['ˈʃʊd']
"THAEURB", # (THAIʃ,): their -- ['ˈðɛɹ']
"A/UL", # (A, UL): all -- ['ˈɔɫ']
"-T/S-P", # (-T, S-P): the -- ['ˈðə', 'ðə', 'ði']
		}
from typing import Set
